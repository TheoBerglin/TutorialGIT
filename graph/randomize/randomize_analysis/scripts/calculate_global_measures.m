function gm = calculate_global_measures(A, A_orig, type)
%CALCULATE_GLOBAL_MEASURES calculates the global measures of graph A and
%returns all these in a struct extending the GM
measures = {
    'assortativity_in_in.m',...
    'assortativity_in_out.m',...
    'assortativity_out_in.m',...
    'assortativity_out_out.m',...
    'characteristic_pathlength_wsg.m',...
    'characteristic_pathlength_wsg_in.m',...
    'characteristic_pathlength_wsg_out.m',...
    'clustering_global.m',...
    'degree_average.m',...
    'degree_in_average.m',...
    'degree_out_average.m',...
    'global_efficiency_average.m',...
    'global_efficiency_in_average.m',...
    'global_efficiency_out_average.m',...
    'transitivity'};
out_var = {
    'ass_in_in',...
    'ass_in_out',...
    'ass_out_in',...
    'ass_out_out',...         
    'cpl_wsg',...
    'cpl_wsg_in',...
    'cpl_wsg_out',...
    'clustering_global',...
    'degree_av',...
    'degree_in_av',...
    'degree_out_av',...
    'gleff_av',...
    'gleff_in_av',...
    'gleff_out_av',...
    'trans'};

gm = struct();
n_measures = size(measures,2);
% Evaluate all measures
for i = 1:n_measures
    func = strrep(measures{i}, '.m', '');
    if isequal(measures{i}, 'validate_randomization')
        eval(sprintf('gm.%s = full(%s(A, A_orig));', out_var{i}, func))
    else
        eval(sprintf('gm.%s = full(%s(A, type));', out_var{i}, func))
    end
end
end

