clear all, clc, close all;
%% Settings
methods = {'randomize_braph_BD' 'randomize_braph_BU' ...
    'randomize_bct_D_edit' 'randomize_bct_U_edit'};
graph_types = {Graph.BD Graph.BU Graph.BD Graph.BU};
nodes = [100 200 500];
densities = [0.01 0.02];

% measures = {
%     'assortativity_in_in.m',...
%     'assortativity_in_out.m',...
%     'assortativity_out_in.m',...
%     'assortativity_out_out.m',...
%     'pathlength_wsg.m',...
%     'pathlength_wsg_in.m',...
%     'pathlength_wsg_out.m',...
%     'clustering_nodal.m',...
%     'degree.m',...
%     'degree_in.m',...
%     'degree_out.m',...
%     'global_efficiency.m',...
%     'global_efficiency_in.m',...
%     'global_efficiency_out.m',...
%     'transitivity'};

% out_var = {
%     'ass_in_in',...
%     'ass_in_out',...
%     'ass_out_in',...
%     'ass_out_out',...
%     'pl_wsg',...
%     'pl_wsg_in',...
%     'pl_wsg_out',...
%     'clustering_nodal',...
%     'degree',...
%     'degree_in',...
%     'degree_out',...
%     'gleff',...
%     'gleff_in',...
%     'gleff_out',...
%     'trans'};
measures = {'degree_average', 'characteristic_pathlength_wsg'};
out_var = {'degree_av', 'cpl_wsg'};

for mi=1:length(methods)
    meth = methods{mi};
    fprintf('Running for method: %s\n', meth)
    type = graph_types{mi};
    
    dir = Graph.is_directed(type);
    wei = Graph.is_weighted(type);
    if wei
        type_bin = 'wei';
    else
        type_bin = 'bin';
    end
    if dir
        type_dir = 'dir';
    else
        type_dir = 'undir';
    end
    
    for ni=1:length(nodes)
        n = nodes(ni);
        fprintf('Running for node size: %d\n', n);
        for di=1:length(densities)
            dens = densities(di);
            fprintf('Running for density: %.2f\n', dens);
            figure();
            load_file = sprintf('dens_%s_nodes_%d_%s_%s.txt', num2str(dens, '%.3f'), n, type_bin, type_dir);  %
            if exist(load_file, 'file')
                A = load(load_file);
            else
                disp('Failed to load matrix')
            end
            for mj=1:length(measures)
                meas = measures{mj};
                out_v = out_var{mj};
                eval(sprintf('orig_val = %s(A, type);', meas))
                fprintf('Running for measure: %s\n', out_v)
                subplot(ceil(sqrt(length(measures))), ceil(sqrt(length(measures))), mj)
                plot_compare_measure_distributions(meth, dens, out_v, n, type)
                plot(orig_val, linspace(0, 100), 'g', 'DisplayName','Original value')
                legend('off')
                legend('on')
            end
            
            
        end
        
    end
    
    
end